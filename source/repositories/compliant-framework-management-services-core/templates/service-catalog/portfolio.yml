######################################################################################################################
#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           #
#                                                                                                                    #
#  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance    #
#  with the License. A copy of the License is located at                                                             #
#                                                                                                                    #
#      http://www.apache.org/licenses/LICENSE-2.0                                                                    #
#                                                                                                                    #
#  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES #
#  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    #
#  and limitations under the License.                                                                                #
######################################################################################################################

AWSTemplateFormatVersion: 2010-09-09

Parameters:
  pS3Bucket:
    Type: String
  pS3Region:
    Type: String
  pCfnRunnerAccountAccessRole:
    Type: String
    Default: CfnRunnerAccountAccessRole

Resources:
  rSsmParameterTemplatesS3BucketName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /compliant/framework/management-services/s3/environment/bucket-name
      Type: String
      Value: !Ref pS3Bucket
  rSsmParameterTemplatesS3Region:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /compliant/framework/management-services/s3/region
      Type: String
      Value: !Ref pS3Region

  rCfnRunnerLambdaRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
    Type: AWS::IAM::Role
    Properties:
      RoleName: CompliantFrameworkCfnRunnerRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
        - PolicyName: sts-assume-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/${pCfnRunnerAccountAccessRole}"

  rCfnRunnerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CompliantFramework-CfnRunner
      Code:
        ZipFile: !Sub |
          import json
          import cfnresponse
          import boto3
          from botocore.exceptions import ClientError

          def get_outputs(cfn_client, stack_name):
            response = cfn_client.describe_stacks(StackName=stack_name)
            responseData = {}
            for stack in response['Stacks']:
              if 'Outputs' in stack:
                for output in stack['Outputs']:
                  responseData[output['OutputKey']] = output['OutputValue']
            return responseData

          def handler(event, context):
            print('event:')
            print(json.dumps(event))

            account_id = event['ResourceProperties']['AccountId']
            template_url = event['ResourceProperties']['TemplateUrl']
            stack_name = event['ResourceProperties']['StackName']

            sts_client = boto3.client('sts')
            assumed_role = sts_client.assume_role(
                RoleArn=f'arn:${AWS::Partition}:iam::{account_id}:role/${pCfnRunnerAccountAccessRole}',
                RoleSessionName=f'CfnRunner'
            )
            cfn_client = boto3.client(
                'cloudformation',
                aws_access_key_id=assumed_role['Credentials']['AccessKeyId'],
                aws_secret_access_key=assumed_role['Credentials']['SecretAccessKey'],
                aws_session_token=assumed_role['Credentials']['SessionToken']
            )

            parameters = []
            capabilities = []

            if 'Parameters' in event['ResourceProperties']:
              for parameter in event['ResourceProperties']['Parameters']:
                parameters.append({'ParameterKey':parameter['Key'],'ParameterValue':parameter['Value']})
            print(parameters)

            if 'Capabilities' in event['ResourceProperties']:
              capabilities.extend(event['ResourceProperties']['Capabilities'])
            print(capabilities)

            if event['RequestType'] == 'Create':
              try:
                response = cfn_client.create_stack(
                    StackName=stack_name,
                    TemplateURL=template_url,
                    Parameters=parameters,
                    Capabilities=capabilities
                )
                print('create_stack response:')
                print(json.dumps(response))
                waiter = cfn_client.get_waiter('stack_create_complete')
                waiter.wait(StackName=stack_name, WaiterConfig={'Delay':30,'MaxAttempts':20})
                responseData = get_outputs(cfn_client, stack_name)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except ClientError as ex:
                print(ex)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
            elif event['RequestType'] == 'Update':
              try:
                response = cfn_client.update_stack(
                    StackName=stack_name,
                    TemplateURL=template_url,
                    Parameters=parameters,
                    Capabilities=capabilities
                )
                print('create_stack response:')
                print(json.dumps(response))
                waiter = cfn_client.get_waiter('stack_update_complete')
                waiter.wait(StackName=stack_name, WaiterConfig={'Delay':30,'MaxAttempts':20})
                physical_resource_id = event['PhysicalResourceId']
                responseData = get_outputs(cfn_client, stack_name)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, physicalResourceId=physical_resource_id)
              except ClientError as ex:
                print(ex)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
            elif event['RequestType'] == 'Delete':
              response = cfn_client.delete_stack(
                  StackName=stack_name
              )
              print('delete_stack response:')
              print(json.dumps(response))
              waiter = cfn_client.get_waiter('stack_delete_complete')
              waiter.wait(StackName=stack_name, WaiterConfig={'Delay':30,'MaxAttempts':20})
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
            return {}
      Handler: index.handler
      Runtime: python3.7
      Timeout: 900
      Role: !GetAtt rCfnRunnerLambdaRole.Arn
  rCfnRunnerLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt rCfnRunnerLambdaFunction.Arn
      Principal: cloudformation.amazonaws.com

  rTenantServicesPortfolio:
    Type: AWS::ServiceCatalog::Portfolio
    Properties:
      DisplayName: Compliant Framework - Tenant Services
      Description: This portfolio provides products that can be used to
        deploy resources into tenant accounts
      ProviderName: Compliant Framework
  rTenantTwoTierVpcV100:
    Type: AWS::ServiceCatalog::CloudFormationProduct
    Properties:
      Description: Initializes a two-tier VPC in a tenant account
      Distributor: Compliant Framework
      Name: Two Tier VPC
      Owner: Compliant Framework
      ProvisioningArtifactParameters:
        - Name: v1.0.0
          Description: This initial version of this product
          Info:
            LoadTemplateFromURL: !Sub
              - https://${pS3Bucket}.${pS3Region}.amazonaws.com/compliant-framework-management-services-core/${templateName}
              - templateName: templates/service-catalog/tenant-services/tenant-two-tier-vpc/V1.0.0/tenant-two-tier-vpc-product.yml
  rTenantTwoTierVpcProductAssociation:
    Type: AWS::ServiceCatalog::PortfolioProductAssociation
    Properties:
      PortfolioId: !Ref rTenantServicesPortfolio
      ProductId: !Ref rTenantTwoTierVpcV100
